name: Backup SQLite DB to Google Drive

on:
  schedule:
    - cron: '0 2 * * MON,WED,FRI'
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    env:
      DB_FILE_PATH: ./server/db.sqlite
      GDRIVE_SA_JSON_PATH: /tmp/gdrive_sa.json
      RCLONE_CONFIG_PATH: /tmp/rclone_custom.conf 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rclone manually
        env:
          RCLONE_VERSION_TO_INSTALL: "v1.64.0"
        run: |
          echo "Installing rclone ${{ env.RCLONE_VERSION_TO_INSTALL }}"
          curl -L https://github.com/rclone/rclone/releases/download/${{ env.RCLONE_VERSION_TO_INSTALL }}/rclone-${{ env.RCLONE_VERSION_TO_INSTALL }}-linux-amd64.deb -o rclone.deb
          sudo apt-get update
          sudo apt-get install -y ./rclone.deb
          rm rclone.deb
          echo "Verifying rclone installation:"
          rclone version
        shell: bash

      - name: Generate Dynamic Names
        id: dynamic_names
        run: |
          echo "UNIQUE_GDRIVE_REMOTE_NAME=gdrive_backup_${{ github.run_id }}_${{ github.run_attempt }}" >> $GITHUB_OUTPUT
          echo "DATE_FOLDER_NAME=$(date +'%d-%m-%Y')" >> $GITHUB_OUTPUT
          echo "Generated unique remote name: gdrive_backup_${{ github.run_id }}_${{ github.run_attempt }}"
          echo "Generated date folder name: $(date +'%d-%m-%Y')"
        shell: bash
        
      - name: Create rclone config for Google Drive (Service Account)
        env:
          GDRIVE_JSON_SECRET_CONTENT: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}
          UNIQUE_REMOTE_NAME_FOR_CONFIG: ${{ steps.dynamic_names.outputs.UNIQUE_GDRIVE_REMOTE_NAME }}
        run: |
          echo "Writing service account JSON to ${{ env.GDRIVE_SA_JSON_PATH }}"
          printf "%s" "$GDRIVE_JSON_SECRET_CONTENT" > ${{ env.GDRIVE_SA_JSON_PATH }}
          
          echo "Creating rclone.conf content at ${{ env.RCLONE_CONFIG_PATH }} for remote $UNIQUE_REMOTE_NAME_FOR_CONFIG"
          RCLONE_CONFIG_CONTENT="[$UNIQUE_REMOTE_NAME_FOR_CONFIG]
          type = drive
          scope = drive
          service_account_file = ${{ env.GDRIVE_SA_JSON_PATH }}
          team_drive = 
          root_folder_id = ${{ secrets.GDRIVE_BACKUP_FOLDER_ID }}"

          echo "$RCLONE_CONFIG_CONTENT" > ${{ env.RCLONE_CONFIG_PATH }}
          echo "Custom rclone.conf created."
        shell: bash

      - name: Check rclone remote root and list its contents
        env:
          UNIQUE_REMOTE_NAME_FOR_CMD: ${{ steps.dynamic_names.outputs.UNIQUE_GDRIVE_REMOTE_NAME }}
        run: |
          echo "Verifying rclone remote setup for $UNIQUE_REMOTE_NAME_FOR_CMD using config ${{ env.RCLONE_CONFIG_PATH }}..."
          rclone about "${UNIQUE_REMOTE_NAME_FOR_CMD}:" --config "${{ env.RCLONE_CONFIG_PATH }}" -vv
          
          echo "Listing root of remote '$UNIQUE_REMOTE_NAME_FOR_CMD:' (JSON output)"
          rclone lsjson "${UNIQUE_REMOTE_NAME_FOR_CMD}:" --config "${{ env.RCLONE_CONFIG_PATH }}" --max-depth 1 -vv 
        shell: bash
        
      - name: Verify db.sqlite exists
        run: |
          if [ ! -f "${{ env.DB_FILE_PATH }}" ]; then
            echo "Error: Database file not found at ${{ env.DB_FILE_PATH }}"
            exit 1
          fi
          echo "Database file found at ${{ env.DB_FILE_PATH }}."
        shell: bash

      - name: Backup db.sqlite to Google Drive
        env:
          UNIQUE_REMOTE_NAME_FOR_CMD: ${{ steps.dynamic_names.outputs.UNIQUE_GDRIVE_REMOTE_NAME }}
          DATE_FOLDER: ${{ steps.dynamic_names.outputs.DATE_FOLDER_NAME }}
        run: |
          echo "Backing up ${{ env.DB_FILE_PATH }} to Google Drive..."
          DESTINATION_PATH="${UNIQUE_REMOTE_NAME_FOR_CMD}:${DATE_FOLDER}/db.sqlite" 
          echo "Destination: ${DESTINATION_PATH}"
          
          # Keep --no-check-dest for now to force upload during testing
          rclone copyto \
            "${{ env.DB_FILE_PATH }}" \
            "${DESTINATION_PATH}" \
            --config "${{ env.RCLONE_CONFIG_PATH }}" \
            --drive-acknowledge-abuse \
            --no-check-dest \
            -vv 
          
          echo "Backup command executed."
        shell: bash

      - name: Clean up temporary files
        if: always()
        run: |
          echo "Cleaning up temporary files"
          rm -f ${{ env.GDRIVE_SA_JSON_PATH }} ${{ env.RCLONE_CONFIG_PATH }}
          echo "Cleanup complete."
        shell: bash
